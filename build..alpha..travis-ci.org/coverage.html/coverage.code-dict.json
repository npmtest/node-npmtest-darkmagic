{"/home/travis/build/npmtest/node-npmtest-darkmagic/test.js":"/* istanbul instrument in package npmtest_darkmagic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-darkmagic/lib.npmtest_darkmagic.js":"/* istanbul instrument in package npmtest_darkmagic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_darkmagic = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_darkmagic = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-darkmagic/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-darkmagic && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_darkmagic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_darkmagic\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_darkmagic.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_darkmagic.rollup.js'] =\n            local.assetsDict['/assets.npmtest_darkmagic.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_darkmagic.__dirname + '/lib.npmtest_darkmagic.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-darkmagic/node_modules/darkmagic/index.js":"var Dependency = module.exports.Dependency = require('./lib/Dependency.js')\nvar Injector = module.exports.Injector = require('./lib/Injector.js');\nvar packageJson = require('./package.json')\nvar debug = require('debug')('darkmagic')\nvar inspect = require('util').inspect\n\nvar injector\n\nmodule.exports.Injector = Injector\nmodule.exports.inject = inject\nmodule.exports.version = packageJson.version\n\nfunction inject(target, overrides, callback) {\n\n\tif (typeof overrides === 'function') {\t\n\t\tcallback = overrides\n\t\toverrides = undefined\n\t}\n\n\tif (!injector) {\n\t\tinjector = new Injector()\n\t}\n\n\tif (typeof target === 'string') {\n\t\ttarget = require(target)\n\t} else if (typeof target !== 'function') {\n\t\tthrow new Error('invalid parameter, must provide a filename or a function')\n\t}\n\n\tinjector.inject(target, overrides, callback)\n\n\treturn injector\n}\n","/home/travis/build/npmtest/node-npmtest-darkmagic/node_modules/darkmagic/lib/Dependency.js":"var debug = require('debug')('darkmagic_Dependency')\nvar path = require('path')\nvar Module = require('module')\nvar util = require('util')\n\nmodule.exports = Dependency\n\nfunction Dependency(name) {\n\tthis.name = name\n\tthis.requireId = undefined\n\tthis.isLocal = false\n\tthis.isFactory = false\n\tthis.isOptional = name.length > 0 && name[name.length - 1] === '_'\n\tthis.isClass = false\n\n\t// TODO: potential bug here?\n\tif (this.isOptional && name.length > 1)\n\t\tthis.name = name.substr(0, name.length - 1)\n\n\tthis.autoInject = false\n\tthis.autoInjectLocalFactories = true\n\tthis.autoInjectExternalFactories = true\n\n\t// usually a reference to the array of the injector's searchPath\n\t// this is slightly risky, but its private api\n\t// on the other hand this is suppose to reduce memory footprint\n\t// so i'm not really sure if its a good or bad thing\n\t// just a reminder to myself that pushing to this array will\n\t// push to searchPath of the injector\n\tthis._searchPaths = []\n\tthis.object = undefined\n}\n\nvar path = require('path')\n\nDependency.prototype.load = function (realModule, parentDependency) {\n\n\tdebug('loading \"%s\"', this.name)\n\n\tvar artifact\n\n\tif (this.object) {\n\t\tdebug('\"%s\" is a custom dependency', this.name)\n\t\treturn this.object\n\t}\n\n\tif (this.requireId) {\n\t\tdebug('\"%s\" is loaded with requireId \"%s\"', this.name, this.requireId)\n\t\tartifact = realModule.require(this.requireId)\n\n\t\tif (!artifact) {\n\t\t\tthrow new Error('this module has a requireId but it was not loaded properly')\t\t\t\n\t\t}\n\n\t\treturn artifact\n\t}\n\n\tvar searchResults = this._init(realModule)\n\t\n\tdebug('found %d possible dependencies', searchResults.length)\n\n\tif (searchResults.length === 0) {\n\t\tif (this.isOptional) {\n\t\t\treturn\n\t\t} else {\n\t\t\tthrow new Error(util.format('\"%s%s\" is Missing dependency \"%s\"', parentDependency.name, parentDependency.isFactory ? '(...)' : '', this.name))\n\t\t}\n\t}\n\n\tif (searchResults.length > 1) {\n\t\tthrow new Error(util.format('multiple dependencies found for %s: %s, name collision must be resolved', this._name, pluck(searchResults, 'name')))\n\t}\n\t\n\tartifact = searchResults[0].artifact\n\n\tthis.requireId = searchResults[0].name\n\tthis.isLocal = searchResults[0].isLocal\n\n\tif (artifact && artifact.$darkmagic) {\n\t\tartifact.$darkmagic.dependency(this, parentDependency);\n\t} else {\n\t\tthis.isFactory = typeof artifact === 'function'\n\t\t\n\t\t// TODO isInjectable refactor point\n\t\tif (this.isFactory && artifact.name) {\n\t\t\tif (require.cache.hasOwnProperty(this.requireId) && require.cache[this.requireId].darkmagic) {\n\t\t\t\tthis.isFactory = false\t\t\t\t\n\t\t\t} else if (artifact.name.substr(0, 6) === 'inject') {\n\t\t\t\tthis.autoInject = true\n\t\t\t} else if (artifact.name.substr(0, 10) === 'dontInject') {\n\t\t\t\tthis.isFactory = false\n\t\t\t} else if (artifact.name[0] === artifact.name[0].toUpperCase() && isNaN(artifact.name[0])) {\n\t\t\t\tdebug('\"%s\" exports a class named \"%s\"', this.name, artifact.name)\n\t\t\t\tthis.isClass = true\n\t\t\t}\n\t\t}\n\t}\n\n\treturn artifact\n}\n\nDependency.prototype._init = function (realModule) {\n\n\tvar artifacts = []\n\n\tvar artifact = this._loadExternal(realModule)\n\n\tif (artifact) {\n\t\tartifacts.push(artifact)\n\t}\n\n\tvar searchPaths = this._searchPaths\n\n\tdebug('trying %d local search paths', searchPaths.length)\n\n\t// try search paths\n\tfor (var x = 0; x < searchPaths.length; x++) {\n\n\t\tvar dir = searchPaths[x]\n\n\t\tvar depPath = path.resolve(dir, this.name)\n\n\t\tartifact = this._loadLocal(realModule, depPath)\n\n\t\tif (artifact) {\n\t\t\tartifacts.push(artifact)\n\t\t}\n\t}\n\n\treturn artifacts\n}\n\nDependency.prototype._loadExternal = function (realModule) {\n\t\n\tvar name = this.name\n\tvar dashedName = this._dashify(name)\n\tvar label = dashedName === name ? name : dashedName + ' [' + name + ']'\n\n\ttry {\n\n\t\tdebug('try require(\\'%s\\')', label)\n\t\t// first try naive require\n\t\tvar artifact = realModule.require(dashedName)\n\n\t\tdebug('OK require(\\'%s\\')', label)\n\n\t\treturn  {\n\t\t\tname: dashedName,\n\t\t\tartifact: artifact,\n\t\t\tisLocal: false\n\t\t}\n\n\t} catch (e) {\n\t\t// catch module not found exceptions but only for the module we are try to load\n\t\tif (e.code === 'MODULE_NOT_FOUND' && this._isModuleSpecificError(dashedName, e)) {\n\t\t\tdebug('fail require(\\'%s\\')', dashedName)\n\t\t} else {\n\t\t\tdebug('an error has occurred while trying to load \"%s\"', dashedName)\n\t\t\tthrow e\n\t\t}\n\t}\n}\n\nDependency.prototype._loadLocal = function (realModule, depPath) {\n\t\n\tdebug('try require(\\'%s\\')', depPath)\n\n\ttry {\n\t\tvar name = Module._resolveFilename(depPath, realModule)\n\n\t\tvar artifact = realModule.require(name)\n\t\t\n\t\tdebug('OK require(\\'%s\\')', name)\n\t\t\n\t\treturn {\n\t\t\tartifact: artifact,\n\t\t\tname: name,\n\t\t\tisLocal: true\n\t\t}\n\n\t} catch (e) {\n\n\t\tif (e.code === 'MODULE_NOT_FOUND' && this._isModuleSpecificError(depPath, e)) {\n\t\t\tdebug('fail require(\\'%s\\')', depPath)\n\t\t} else {\n\t\t\tdebug('an error has occurred while trying to load \"%s\"', depPath)\n\t\t\tthrow e\n\t\t}\n\t}\n}\n\n//TODO need to refactor this, its spread here and in injectFunctor.\n// there is ambiguity as to who decides what: injector has a policy\n// but it should be overridable at dependency level if injector\n// permits such behavior, this is terrible!\nDependency.prototype.isInjectable = function () {\n\tdebug('isInjectable()')\n\tif (this.autoInject) return true;\n\n\tdebug('this.isClass=%s this.isFactory=%s (this.isLocal && this.autoInjectLocalFactories)=%s (!this.isLocal && this.autoInjectExternalFactories)=%s'\n\t\t, this.isClass, this.isFactory, this.isLocal && this.autoInjectLocalFactories, !this.isLocal && this.autoInjectExternalFactories)\n\n\treturn !this.isClass && this.isFactory &&\n\t\t((this.isLocal && this.autoInjectLocalFactories) ||\n\t\t\t(!this.isLocal && this.autoInjectExternalFactories))\n}\n\nDependency.prototype.searchPaths = function(searchPaths) {\n\tthis._searchPaths = searchPaths\n}\n\nDependency.prototype._dashify = function(name) {\n\tif (name.length === 0) return name\n\n\tvar result = name[0]\n\n\tfor (var i = 1; i < name.length; i++) {\n\n\t\tif (name[i] === name[i].toUpperCase() && isNaN(name[i]) && name[i] !== '_') {\n\t\t\tresult += '-' + name[i].toLowerCase()\n\t\t} else {\n\t\t\tresult += name[i]\n\t\t}\n\t}\n\n\treturn result\n}\n\n//TODO: make this check more robust\nDependency.prototype._isModuleSpecificError = function (module, e) {\n\treturn e.toString().indexOf(module) > -1\n}\n\n\nfunction pluck (arr, property) {\n\tvar results = []\n\n\tfor (var x = 0; x < arr.length; x++) {\n\t\tresults.push (arr[x][property])\n\t}\n\n\treturn results\n}","/home/travis/build/npmtest/node-npmtest-darkmagic/node_modules/darkmagic/lib/Injector.js":"var debug = require('debug')('darkmagic_Injector')\nvar Waterfall = require('./Waterfall.js')\nvar Dependency = require('./Dependency.js')\nvar path = require('path')\nvar fs = require('fs')\nvar esprima = require('esprima')\nvar util = require('util')\nvar assert = require('assert')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\n\nmodule.exports = Injector\n\n/* words that cannot be used as parameters */\nvar ILLEGAL = [ 'toString' ]\n\nutil.inherits(Injector, EventEmitter)\nfunction Injector(options) {\n\tEventEmitter.call(this)\n\n\toptions = options || {}\n\tthis._customCache = {}\n\tthis.explicitRealModule = options.explicitRealModule\n\n\tvar realModule = this._getRealModule()\n\n\tthis._initSearchPaths(path.dirname(realModule.filename))\n\n\tvar injectorDependency = this.newDependencyObject('$injector')\n\tinjectorDependency.object = this\n\n\tthis._cacheDependency(injectorDependency, this)\n\n\tthis.autoInjectLocalFactories = options.autoInjectLocalFactories === undefined ? true : options.autoInjectLocalFactories\n\tthis.autoInjectExternalFactories = options.autoInjectExternalFactories === undefined ? false: options.autoInjectExternalFactories\n}\n\nInjector.prototype.inject = function(target, overrides, callback) {\n\n\tif (typeof (overrides) === 'function') {\n\t\tcallback = overrides\n\t\toverrides = undefined\t\t\n\t}\n\n\tif (typeof (overrides) === 'object') {\n\t\ttry {\n\t\t\tthis.addOverrides(overrides)\n\t\t} catch (e) {\n\t\t\tif (callback) return callback(e)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tvar realModule = this._getRealModule()\n\tvar params\n\n\t// actuation instead of inject, in this scenario we dont finish by calling target\n\tif (util.isArray(target)) {\n\t\tdebug('target is an array')\n\t\tparams = []\n\t\t\n\t\tfor (var i = 0; i < target.length; i++) {\n\t\t\tparams.push({ name: target[i] })\n\t\t}\n\n\t\ttarget = actuation\n\t}\n\n\tif (typeof target !== 'function') {\n\t\tthrow new Error('can only inject functions')\n\t}\n\n\tparams = params || this._getFunctionParameters(target)\n\tvar dependency = new Dependency(target.name || 'anonymous')\n\t\n\tthis._inject(target, params, realModule, dependency, [], this._callbackOrThrow(callback))\n}\n\nInjector.prototype._inject = function(target, params, realModule, targetDependency, ancestors, callback) {\n\n\tdebug('_inject \"%s\" (%s)', targetDependency.name, typeof target)\n\tdebug('\"%s\" has %d params', targetDependency.name, params.length)\n\n\tif (typeof target !== 'function')\n\t\tthrow new Error('can only inject functions')\n\n\t// if there are no parameters take the short path\n\tif (params.length === 0) {\n\t\tinvokeTarget(this, target, targetDependency, false, callback)()\n\t\treturn\n\t}\n\n\tvar _hasCallbackParam = hasCallbackParam(params)\n\n\tif (_hasCallbackParam)\n\t\tparams.pop()\n\t\n\tvar args = []\n\tvar order = []\n\tvar waterfall = new Waterfall(args)\n\n\t// resolve params\n\tfor (var i = 0; i < params.length; i++) {\n\n\t\tvar dependencyName = params[i].name\n\n\t\tif (ILLEGAL.indexOf(dependencyName) > -1)\n\t\t\tthrow new Error('illegal parameter name ' + dependency)\n\n\t\tvar dependency = this.getDependencyByName(dependencyName)\n\n\t\tvar exists = dependency !== undefined\n\n\t\tif (exists) {\n\t\t\tvar artifact\n\t\t\t\n\t\t\ttry {\n\t\t\t\tartifact = dependency.load(realModule, targetDependency)\n\t\t\t} catch(e) {\n\t\t\t\treturn callback(e)\n\t\t\t}\n\n\t\t\targs.push(artifact)\n\t\t\tdebug('dependency \"%s\" exists', dependencyName)\n\t\t} else {\n\n\t\t\tdebug('dependency \"%s\" is new', dependencyName)\t\t\t\n\t\t\tdependency = this.newDependencyObject(dependencyName)\t\n\t\t\torder.push(i)\n\t\t\targs.push(injectFunctor(this, realModule, ancestors, dependency, targetDependency))\n\t\t}\n\t}\n\n\tdebug('running waterfall [%s]', order)\n\t// after all the dependencies have been resolved, invoke the current dependency\t\n\twaterfall.run(order, invokeTarget(this, target, targetDependency, _hasCallbackParam, callback))\n}\n\nfunction injectFunctor(injector, realModule, ancestors, dependency, parentDependency) {\n\treturn function (callback) {\n\n\t\tvar dependencyName = dependency.name\t\t\n\t\tdebug('injectFunctor(\"%s\" => \"%s\")', dependencyName, parentDependency.name)\n\n\t\tvar artifact \n\n\t\ttry {\n\t\t\tartifact = dependency.load(realModule, parentDependency)\t\t\t\n\t\t} catch (e) {\t\t\t\n\t\t\treturn callback(e)\n\t\t}\n\t\t\n\t\t// missing dependency?\n\t\tif (!artifact) {\n\t\t\tif (dependency.isOptional) callback()\n\t\t\telse callback(\n\t\t\t\tnew Error(\n\t\t\t\t\tutil.format('\"%s%s\" is Missing dependency \"%s\"',\n\t\t\t\t\t\tparentDependency.name,\n\t\t\t\t\t\tparentDependency.isFactory ? '(...)' : '', dependencyName)))\n\n\t\t\treturn\n\t\t}\n\n\t\tif (dependency.isInjectable()) {\n\t\t\tdebug('dependency \"%s\" is injectable', dependencyName)\n\n\t\t\t// circular dependencyName\n\t\t\tdebug('\"%s\" ancestors: [%s]', dependencyName, ancestors)\t\t\t\n\t\t\tif (ancestors && ancestors.indexOf(dependencyName) > -1) {\n\t\t\t\tcallback(new Error(\n\t\t\t\t\tutil.format('circular dependency detected between \"%s\" and \"%s\", dependency chain was: \"%s\"',\n\t\t\t\t\t\tdependencyName, parentDependency.name, util.inspect(ancestors))))\n\t\t\t} else {\n\t\t\t\tancestors = ancestors || []\n\t\t\t\tancestors.push(dependencyName)\n\t\t\t}\n\n\t\t\tvar params = injector._getFunctionParameters(artifact)\n\n\t\t\tinjector._inject(artifact, params, realModule, dependency, ancestors, callback)\n\t\t} else {\n\t\t\tdebug('dependency \"%s\" not injectable', dependencyName)\n\t\t\tinjector._cacheDependency(dependency, artifact)\n\t\t\tcallback(null, artifact)\n\t\t}\n\t}\n}\n\nfunction invokeTarget(injector, target, dependency, hasCallbackParam, callback) {\n\treturn function invokeTargetFunctor(err, results) {\n\t\tdebug('invoking \"%s\", hasCallbackParam: %s', dependency.name, hasCallbackParam)\n\n\t\tvar resolve = resolveDependencyCallback(injector, dependency, callback)\n\n\t\tif (err)\n\t\t\treturn resolve(err);\n\n\t\t// invoke the artifact\n\t\tif (hasCallbackParam) {\n\t\t\tresults.push(resolve)\n\t\t\ttarget.apply(null, results)\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar returnValue = target.apply(null, results)\n\t\t\t\tresolve(null, returnValue)\n\t\t\t} catch (e) {\n\t\t\t\tresolve(e)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction resolveDependencyCallback(injector, dependency, next) {\n\treturn function resolveFunctor(err, result) {\n\t\tdebug('resolved \"%s\"', dependency.name)\n\t\t// not sure this is the right thing to do ...\n\t\tif (err) {\n\t\t\treturn next(err)\n\t\t}\n\n\t\tif (dependency.isInjectable() && result) {\n\t\t\t// this dependency is a factory that resolved successfully,\n\t\t\t// save the results of the invocation for next time. \n\t\t\tdependency.isFactory = false\n\t\t\tinjector._cacheDependency(dependency, result)\t\t\t\n\t\t}\n\n\t\tnext(null, result)\n\t}\n}\n\nfunction hasCallbackParam(params) {\n\treturn params[params.length - 1].name === 'callback'\n}\n\nInjector.prototype.addDependency = function (dependency) {\n\tif (dependency.name === '$injector') {\n\t\tthrow new Error('cannot add an injector dependency')\n\t}\n\n\tdebug('addDependency() \"%s\"', dependency.name)\n\tthis._cacheDependency(dependency, dependency.load(this._getRealModule(), null))\n}\n\nInjector.prototype._cacheDependency = function (dependency, artifact) {\n\tif (!this.getDependencyByName(dependency.name)) {\t\t\n\t\tthis.emit('new dependency', dependency, artifact)\n\t}\n\n\t// TOD: consider IoC here, then have two types of dependencies instead of having all these ifs laying around\n\tif (dependency.object) {\n\t\tdebug('caching dependency \"%s\" in custom cache', dependency.name)\n\t\tthis._customCache[dependency.name] = dependency  \n\t} else {\n\t\tdebug('caching \"%s\" with requireId: \"%s\"', dependency.name, dependency.requireId)\t\t\n\t\tthis._customCache[dependency.requireId] = require.cache[dependency.requireId] = { exports: artifact, darkmagic: dependency }\n\t}\n}\n\nInjector.prototype.removeDependency = function (dependency) {\n\tif (typeof dependency === 'string') {\n\t\tdependency = this.getDependencyByName(dependency)\n\n\t\tif (!dependency) {\n\t\t\t// TODO should I throw an exception here ?\n\t\t\tdebug('trying to remove a non existent dependency')\n\t\t\treturn\n\t\t}\n\t}\n\n\tdebug('removeDependency() \"%s\"', dependency.name)\n\tdelete require.cache[dependency.requireId]\n\tdelete this._customCache[dependency.name]\n}\n\nInjector.prototype.getDependencyByName = function(name) {\n\tvar cache = require.cache\n\t\n\tfor (var requireId in cache) {\n\t\tif (!cache.hasOwnProperty(requireId)) {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar dependency = cache[requireId].darkmagic\n\n\t\tif (dependency && dependency.name === name) {\n\t\t\tdebug('dependency %s found in require cache', name)\n\t\t\treturn dependency\n\t\t}\n\t}\n\n\tif (this._customCache.hasOwnProperty(name)) {\n\t\tvar customCacheDependency = this._customCache[name]\n\t\t\n\t\tif (customCacheDependency) {\n\t\t\tdebug('dependency %s found in custom cache', name)\n\t\t\treturn customCacheDependency\n\t\t}\n\t}\n\t\n\t// return nothing otherwise\n\treturn\n}\n\nInjector.prototype.addSearchPath = function (p) {\n\tdebug('adding search path \"%s\"', p)\n\tthis._searchPaths.unshift(p)\n}\n\nInjector.prototype.newDependencyObject = function (name) {\n\tvar dependency = new Dependency(name)\n\n\tdependency.autoInjectLocalFactories = this.autoInjectLocalFactories\n\tdependency.autoInjectExternalFactories = this.autoInjectExternalFactories\n\tdependency.searchPaths(this._searchPaths)\n\n\treturn dependency\n}\n\nInjector.prototype._getFunctionParameters = function (f) {\n\n\tvar parsed = esprima.parse('__f__f(' + f.toString() + ')')\n\n\tvar parsedFunction = parsed.body[0].expression.arguments[0]\n\n\tif (parsedFunction && parsedFunction.params && parsedFunction.params.length > 0)\n\t\treturn parsedFunction.params\n\n\treturn []\n}\n\nInjector.prototype._initSearchPaths = function (rootDir) {\n\tthis._searchPaths = []\n\n\tvar lib1 = path.resolve(rootDir, 'lib')\n\n\t// TODO: dont remember why I did this, looks redundant or otherwise obsolete...\n\tvar lib2 = path.resolve(rootDir, '..', 'lib')\n\n\tif (this._isDirectory(lib1)) {\n\t\tthis.addSearchPath(lib1)\n\t}\n\n\tif (this._isDirectory(lib2)) {\n\t\tthis.addSearchPath(lib2)\n\t}\n\n\tdebug('injector initial search paths: %s', util.inspect( this._searchPaths))\n}\n\nInjector.prototype._isDirectory = function(dir) {\n\treturn fs.existsSync(dir) && fs.statSync(dir).isDirectory()\n}\n\nInjector.prototype._getRealModule = function () {\n\n\t// use the thing that required darkmagic\n\tif (this.explicitRealModule) {\t\t\n\t\tdebug('using explicitRealModule')\n\t\treturn this.explicitRealModule\n\t} \n\n\tif (module.parent && module.parent.parent) {\t\t\n\t\tdebug('using module.parent.parent')\n\t\treturn module.parent.parent\n\t} \n\n\tdebug('using require.main')\n\treturn require.main\n}\n\nInjector.prototype._callbackOrThrow = function (userCallback) {\n\tvar injector = this\n\n\treturn function handler(err) {\t\n\t\tif (typeof userCallback === 'function') {\n\t\t\treturn userCallback(err)\n\t\t}\n\n\t\tif (err) {\n\t\t\tdebug('throwing error because no callback is supplied by the user')\n\t\t\tthrow err\n\t\t}\n\t}\n}\n\n/*\n  *\toverride with custom dependencies\n  */\nInjector.prototype.addOverrides = function(overrides) {\n\tfor (var name in overrides) {\n\t\tdebug('overriding dependency %s', name)\n\t\t\n\t\tvar existing = this.getDependencyByName(name)\n\t\t\n\t\tif (existing) {\n\t\t\tdebug('removing existing dependency %s', name)\n\t\t\tthis.removeDependency(existing)\n\t\t}\n\n\t\tvar dep = new Dependency(name)\n\n\t\tif (typeof overrides[name] === 'string') {\n\t\t\tdep.requireId = overrides[name]\n\t\t} else {\t\t\n\t\t\tdep.object = overrides[name]\n\t\t}\n\n\t\tthis.addDependency(dep)\t\t\n\t}\n}\n\nInjector.prototype.clearCache = function () {\n\tdebug('clearing cache')\n\t\n\tvar cache = require.cache\t\n\tvar customCache = this._customCache\n\n\tfor (var name in customCache) {\n\t\tif (name === '$injector') continue\n\n\t\tif (customCache.hasOwnProperty(name)) {\n\t\t\tdelete customCache[name]\n\t\t}\n\n\t\tif (cache.hasOwnProperty(name)) {\n\t\t\tdelete cache[name]\n\t\t}\t\n\t}\n}\n\nfunction actuation() {}","/home/travis/build/npmtest/node-npmtest-darkmagic/node_modules/darkmagic/lib/Waterfall.js":"module.exports = Waterfall\nfunction Waterfall(work) {\n\tthis.work = work\n}\n\nWaterfall.prototype.run = function(order, done) {\n\n\tvar self = this\n\n\tvar index = 0\n\tvar len = order.length\n\t\n\tfunction callback(err, result) {\n\n\t\tif (err) {\n\t\t\treturn done(err)\n\t\t}\n\t\t\n\t\tself.work[order[index]] = result\n\n\t\tif (++index < len) {\n\t\t\tself.work[order[index]].call(null, callback)\n\t\t} else {\n\t\t\tdone(null, self.work)\n\t\t}\n\t}\n\n\tif (len > 0)\n\t\tthis.work[order[index]].call(null, callback)\n\telse\n\t\tdone(null, self.work)\n}\n","/home/travis/build/npmtest/node-npmtest-darkmagic/node_modules/darkmagic/bin/darkmagic.js":"#!/usr/bin/env node\nvar darkmagic = require('../index.js')\nvar path = require('path')\n\nconsole.log('experimental feature... still not working properly')\n\nvar main = process.argv[2]\n\nif (!main) {\n\tconsole.error('missing main file')\n\tprocess.exit(1)\n}\n\ndarkmagic.inject(require(path.resolve(process.cwd(), main)))\n\n\n"}